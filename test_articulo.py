# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class Articulo():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
    # Test name: articulo
    # Step # | name | target | value
    # 1 | open | /Academia3/solicitudes | 
    self.driver.get("https://srv.aneca.es/Academia3/solicitudes")
    # 2 | setWindowSize | 1200x831 | 
    self.driver.set_window_size(1200, 831)
    # 4 | waitForElementPresent | css=#nuevaPublicacionIdxId | 30000
    WebDriverWait(self.driver, 60).until(expected_conditions.presence_of_element_located((By.CSS_SELECTOR, "#nuevaPublicacionIdxId")))
  
  def teardown_method(self, method):
    self.driver.quit()

  def getPagDesde(self, record):
    if 'pages' in record:
      return record['pages'].split('--')[0]
    return ''

  def getPagHasta(self, record):
    if 'pages' in record:
      pages = record['pages'].split('--')
      if len(pages) > 1:
        return pages[1]
    return ''

  def getOptionalField(self, record, field):
    if field in record:
      return record[field]
    return ''
  
  def insertAuthor(self, author):
    if ',' in author:
      l=[e.strip() for e in author.split(',')]
      l.reverse()
      author = " ".join(l)
    # 6 | type | id=autoresFilter | Francisco Chicano
    self.driver.find_element(By.ID, "autoresFilter").send_keys(author)
    # 7 | sendKeys | id=autoresFilter | ${KEY_ENTER}
    self.driver.find_element(By.ID, "autoresFilter").send_keys(Keys.ENTER)

  def establece_campos_opcionales(self, record):
    self.driver.find_element(By.ID, "doiTextId").send_keys(self.getOptionalField(record,'doi'))
    self.driver.find_element(By.ID, "pagDesdeTextId").send_keys(self.getPagDesde(record))
    self.driver.find_element(By.ID, "pagHastaTextId").send_keys(self.getPagHasta(record))
    self.driver.find_element(By.ID, "editorialTextId").send_keys(self.getOptionalField(record,'publisher'))
    self.driver.find_element(By.ID, "issnTextId").send_keys(self.getOptionalField(record,'issn'))

    # Campos bibliométricos
    self.driver.find_element(By.ID, "baseDatosTextId").send_keys(self.getOptionalField(record,'metricsdb'))
    self.driver.find_element(By.ID, "posRevistaTextId").send_keys(self.getOptionalField(record,'posincat'))
    self.driver.find_element(By.ID, "posRevistaMaxTextId").send_keys(self.getOptionalField(record,'maxincat'))
    self.driver.find_element(By.ID, "categoriaTextId").send_keys(self.getOptionalField(record,'category'))
    self.driver.find_element(By.ID, "annioCalidadTextId").send_keys(self.getOptionalField(record,'yearmetrics'))
    self.driver.find_element(By.ID, "indiceImpactoTextId").send_keys(self.getOptionalField(record,'impactfactor'))
    self.driver.find_element(By.ID, "citasJcrTextId").send_keys(self.getOptionalField(record,'jcrcites'))
    self.driver.find_element(By.ID, "citasTotalTextId").send_keys(self.getOptionalField(record,'totalcites'))
    self.driver.find_element(By.ID, "otrosIndiciosTextAreaId").send_keys(self.getOptionalField(record,'qualityevidences'))
    
    

    tercile=self.getOptionalField(record,'tercile')
    if tercile in ['T1', 'T2', 'T3']:
      self.driver.find_element(By.CSS_SELECTOR, "#tercilLabelId + div input").send_keys(tercile)
      time.sleep(0.5)
      self.driver.find_element(By.CSS_SELECTOR, "#tercilLabelId + div input").send_keys(Keys.ENTER)
      time.sleep(0.5)

    quartile = self.getOptionalField(record,'quartile')
    if quartile.startswith('Q'):
      quartile = quartile[1:]

    if quartile in ['1', '2', '3', '4']:
      dropdown = self.driver.find_element(By.CSS_SELECTOR, "#cuartilComboId")    
      dropdown.find_element(By.XPATH, f'//option[. = "{quartile}"]').click()



  def aniade_articulo(self, record, pos):
    # 4 | waitForElementPresent | css=#nuevaPublicacionIdxId | 30000
    WebDriverWait(self.driver, 60).until(expected_conditions.presence_of_element_located((By.CSS_SELECTOR, "#nuevaPublicacionIdxId")))
    time.sleep(1)
    # 5 | click | css=#nuevaPublicacionIdxId > label | 
    self.driver.find_element(By.CSS_SELECTOR, "#nuevaPublicacionIdxId > label").click()

    WebDriverWait(self.driver, 60).until(expected_conditions.presence_of_element_located((By.CSS_SELECTOR, "#autoresFilter")))
    time.sleep(1)
    for author in record['author']:
      self.insertAuthor(author)


    self.driver.find_element(By.ID, "posicionSolicitanteTextId").send_keys(str(pos))
    #time.sleep(1)
    # 13 | type | css=#claveLabelid + div input | Artículo
    self.driver.find_element(By.CSS_SELECTOR, "#claveLabelid + div input").send_keys("Artículo")
    time.sleep(0.5)
    # 14 | sendKeys | css=#claveLabelid + div input | ${KEY_ENTER}
    self.driver.find_element(By.CSS_SELECTOR, "#claveLabelid + div input").send_keys(Keys.ENTER)
    time.sleep(0.5)
    # 15 | type | id=tituloTextId | Hola
    self.driver.find_element(By.ID, "tituloTextId").send_keys(record['plain_title'])
    #time.sleep(1)
    # 16 | type | id=nombreRevistaTextId | Expoert
    self.driver.find_element(By.ID, "nombreRevistaTextId").send_keys(record['plain_journal'])
    #time.sleep(1)
    # 17 | type | id=volumenTextId | 161
    self.driver.find_element(By.ID, "volumenTextId").send_keys(record['volume'])
    #time.sleep(1)
    # 18 | type | id=annioPublicacionTextId | 2020
    self.driver.find_element(By.ID, "annioPublicacionTextId").send_keys(record['year'])
    self.establece_campos_opcionales(record)
    #time.sleep(1)
    # 19 | click | id=saveBtn | 
    self.driver.find_element(By.ID, "saveBtn").click()
    time.sleep(3)
  
class Congreso():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
    # Test name: articulo
    # Step # | name | target | value
    # 1 | open | /Academia3/solicitudes | 
    self.driver.get("https://srv.aneca.es/Academia3/solicitudes")
    # 2 | setWindowSize | 1200x831 | 
    self.driver.set_window_size(1200, 831)
    # 4 | waitForElementPresent | css=#nuevaPublicacionIdxId | 30000
    WebDriverWait(self.driver, 60).until(expected_conditions.presence_of_element_located((By.CSS_SELECTOR, "#nuevoCongreso")))
  
  def teardown_method(self, method):
    self.driver.quit()

  def getPagDesde(self, record):
    if 'pages' in record:
      return record['pages'].split('--')[0]
    return ''

  def getPagHasta(self, record):
    if 'pages' in record:
      pages = record['pages'].split('--')
      if len(pages) > 1:
        return pages[1]
    return ''

  def getFechaDesde(self, record):
    if 'date' in record:
      return record['date'].split('--')[0]
    return ''

  def getFechaHasta(self, record):
    if 'date' in record:
      dates = record['date'].split('--')
      if len(dates) > 1:
        return dates[1]
    return ''

  def getOptionalField(self, record, field):
    if field in record:
      return record[field]
    return ''
  
  def insertAuthor(self, author):
    if ',' in author:
      l=[e.strip() for e in author.split(',')]
      l.reverse()
      author = " ".join(l)
    # 6 | type | id=autoresFilter | Francisco Chicano
    self.driver.find_element(By.ID, "autoresFilter").send_keys(author)
    # 7 | sendKeys | id=autoresFilter | ${KEY_ENTER}
    self.driver.find_element(By.ID, "autoresFilter").send_keys(Keys.ENTER)

  def aniade_congreso(self, record, pos):
    # 4 | waitForElementPresent | css=#nuevaPublicacionIdxId | 30000
    WebDriverWait(self.driver, 60).until(expected_conditions.presence_of_element_located((By.CSS_SELECTOR, "#nuevoCongreso")))
    time.sleep(1)
    # 5 | click | css=#nuevaPublicacionIdxId > label | 
    self.driver.find_element(By.CSS_SELECTOR, "#nuevoCongreso > label").click()

    WebDriverWait(self.driver, 60).until(expected_conditions.presence_of_element_located((By.CSS_SELECTOR, "#autoresFilter")))
    time.sleep(1)
    for author in record['plain_author']:
      self.insertAuthor(author)

    self.driver.find_element(By.CSS_SELECTOR, "#tipoParticipacionLabelId + div input").send_keys("Ponencia")
    time.sleep(0.5)
    self.driver.find_element(By.CSS_SELECTOR, "#tipoParticipacionLabelId + div input").send_keys(Keys.ENTER)
    time.sleep(0.5)
    self.driver.find_element(By.ID, "tituloTextId").send_keys(record['plain_title'])
    #time.sleep(1)
    self.driver.find_element(By.ID, "denominacionTextId").send_keys(record['plain_booktitle'])
    self.driver.find_element(By.ID, "entidadOrganizadoraTextId").send_keys(record['plain_organization'])
    self.driver.find_element(By.ID, "lugarTextId").send_keys(record['plain_place'])

    self.driver.find_element(By.ID, "fDesdeTextId").send_keys(self.getFechaDesde(record))
    self.driver.find_element(By.ID, "fHastaTextId").send_keys(self.getFechaHasta(record))
    # Campos opcionales
    self.driver.find_element(By.ID, "tituloPubliTextId").send_keys(self.getOptionalField(record,'series'))
    self.driver.find_element(By.ID, "issnisbnTextId").send_keys(self.getOptionalField(record,'isbn'))
    self.driver.find_element(By.ID, "volumenTextId").send_keys(self.getOptionalField(record,'volume'))
    self.driver.find_element(By.ID, "pagDesdeTextId").send_keys(self.getPagDesde(record))
    self.driver.find_element(By.ID, "pagHastaTextId").send_keys(self.getPagHasta(record))
    
    self.driver.find_element(By.ID, "saveBtn").click()
    time.sleep(3)


class Tfe():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
    self.driver.get("https://srv.aneca.es/Academia3/solicitudes")
    self.driver.set_window_size(1200, 831)
    # 4 | waitForElementPresent | css=#nuevaPublicacionIdxId | 30000
    WebDriverWait(self.driver, 60).until(
      expected_conditions.presence_of_element_located((By.CSS_SELECTOR, "#nuevoTrabajoAvanzadoId")))

  def teardown_method(self, method):
    self.driver.quit()

  def getOptionalField(self, record, field):
    if field in record:
      return record[field]
    return ''

  def aniade_tfe(self, record):
    WebDriverWait(self.driver, 60).until(
      expected_conditions.presence_of_element_located((By.CSS_SELECTOR, "#nuevoTrabajoAvanzadoId")))
    time.sleep(1)
    self.driver.find_element(By.CSS_SELECTOR, "#nuevoTrabajoAvanzadoId > label").click()

    WebDriverWait(self.driver, 60).until(
      expected_conditions.presence_of_element_located((By.CSS_SELECTOR, "#tituloTextId")))
    time.sleep(1)
    self.driver.find_element(By.ID, "tituloTextId").send_keys(record['Title'])
    self.driver.find_element(By.CSS_SELECTOR, "#universidadLabelId + div input").send_keys(record['University'])
    time.sleep(0.5)
    self.driver.find_element(By.CSS_SELECTOR, "#universidadLabelId + div input").send_keys(Keys.ENTER)
    time.sleep(0.5)
    self.driver.find_element(By.ID, "annioTrabajoAvanzadoTextId").send_keys(record['Year'])
    self.driver.find_element(By.ID, "calificacionTextId").send_keys(record['Grade'])

    # Campos opcionales
    self.driver.find_element(By.ID, "premiosYMencionesTextAreaId").send_keys(self.getOptionalField(record,'Awards'))
    self.driver.find_element(By.ID, "codirectoresTextId").send_keys(self.getOptionalField(record, 'Advisor'))

    self.driver.find_element(By.ID, "saveBtn").click()
    time.sleep(3)
