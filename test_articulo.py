# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class Articulo():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
    # Test name: articulo
    # Step # | name | target | value
    # 1 | open | /Academia3/solicitudes | 
    self.driver.get("https://srv.aneca.es/Academia3/solicitudes")
    # 2 | setWindowSize | 1200x831 | 
    self.driver.set_window_size(1200, 831)
    # 4 | waitForElementPresent | css=#nuevaPublicacionIdxId | 30000
    WebDriverWait(self.driver, 60).until(expected_conditions.presence_of_element_located((By.CSS_SELECTOR, "#nuevaPublicacionIdxId")))
  
  def teardown_method(self, method):
    self.driver.quit()

  def getPagDesde(self, record):
    if 'pages' in record:
      return record['pages'].split('--')[0]
    return ''

  def getPagHasta(self, record):
    if 'pages' in record:
      pages = record['pages'].split('--')
      if len(pages) > 1:
        return pages[1]
    return ''

  def getOptionalField(self, record, field):
    if field in record:
      return record[field]
    return ''
  
  def aniade_articulo(self, record, pos):
    # 4 | waitForElementPresent | css=#nuevaPublicacionIdxId | 30000
    WebDriverWait(self.driver, 60).until(expected_conditions.presence_of_element_located((By.CSS_SELECTOR, "#nuevaPublicacionIdxId")))
    time.sleep(1)
    # 5 | click | css=#nuevaPublicacionIdxId > label | 
    self.driver.find_element(By.CSS_SELECTOR, "#nuevaPublicacionIdxId > label").click()

    WebDriverWait(self.driver, 60).until(expected_conditions.presence_of_element_located((By.CSS_SELECTOR, "#autoresFilter")))
    time.sleep(1)
    for author in record['author']:
      # 6 | type | id=autoresFilter | Chrisitan
      self.driver.find_element(By.ID, "autoresFilter").send_keys(author)
      # 7 | sendKeys | id=autoresFilter | ${KEY_ENTER}
      self.driver.find_element(By.ID, "autoresFilter").send_keys(Keys.ENTER)


    self.driver.find_element(By.ID, "posicionSolicitanteTextId").send_keys(str(pos))
    #time.sleep(1)
    # 13 | type | css=#claveLabelid + div input | Artículo
    self.driver.find_element(By.CSS_SELECTOR, "#claveLabelid + div input").send_keys("Artículo")
    time.sleep(1)
    # 14 | sendKeys | css=#claveLabelid + div input | ${KEY_ENTER}
    self.driver.find_element(By.CSS_SELECTOR, "#claveLabelid + div input").send_keys(Keys.ENTER)
    time.sleep(1)
    # 15 | type | id=tituloTextId | Hola
    self.driver.find_element(By.ID, "tituloTextId").send_keys(record['plain_title'])
    self.driver.find_element(By.ID, "doiTextId").send_keys(self.getOptionalField(record,'doi'))
    self.driver.find_element(By.ID, "pagDesdeTextId").send_keys(self.getPagDesde(record))
    self.driver.find_element(By.ID, "pagHastaTextId").send_keys(self.getPagHasta(record))
    self.driver.find_element(By.ID, "editorialTextId").send_keys(self.getOptionalField(record,'publisher'))
    self.driver.find_element(By.ID, "issnTextId").send_keys(self.getOptionalField(record,'issn'))
    #time.sleep(1)
    # 16 | type | id=nombreRevistaTextId | Expoert
    self.driver.find_element(By.ID, "nombreRevistaTextId").send_keys(record['plain_journal'])
    #time.sleep(1)
    # 17 | type | id=volumenTextId | 161
    self.driver.find_element(By.ID, "volumenTextId").send_keys(record['volume'])
    #time.sleep(1)
    # 18 | type | id=annioPublicacionTextId | 2020
    self.driver.find_element(By.ID, "annioPublicacionTextId").send_keys(record['year'])
    #time.sleep(1)
    # 19 | click | id=saveBtn | 
    self.driver.find_element(By.ID, "saveBtn").click()
    time.sleep(3)
  
